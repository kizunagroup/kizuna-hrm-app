**CẤU TRÚC DỮ LIỆU**

```sql
-- 1. Phòng ban (Departments)
CREATE TABLE departments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    manager_id UUID REFERENCES employees(id), -- Có thể null trong giai đoạn đầu
    description TEXT,
    UNIQUE (name)
);

-- 2. Chức danh (Job Titles)
CREATE TABLE job_titles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL UNIQUE
);

-- 3. Nhân viên (Employees) -
CREATE TABLE employees (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    employee_code TEXT UNIQUE NOT NULL, -- Mã nhân viên (ví dụ: NV001),
    user_id UUID, -- ID của user trong Supabase Auth
    full_name TEXT NOT NULL,
    gender TEXT CHECK (gender IN ('Male', 'Female', 'Other')),
    date_of_birth DATE,
    work_email TEXT UNIQUE, -- Email công việc
    login_email TEXT UNIQUE NOT NULL, -- Email dùng để đăng nhập (tạo tự động)
    department_id UUID REFERENCES departments(id),
    job_title_id UUID REFERENCES job_titles(id),
    hire_date DATE NOT NULL,
    termination_date DATE, -- Ngày nghỉ việc (có thể null)
    status TEXT DEFAULT 'Active' CHECK (status IN ('Active', 'Inactive')),
    avatar_url TEXT,
    education_level TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. Vai trò (Roles)
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL UNIQUE  -- "admin", "bod", "manager", "hr_employee", "employee"
);

-- 5. Bảng liên kết User - Role
CREATE TABLE user_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES employees(id) ON DELETE CASCADE,
    role_id UUID REFERENCES roles(id) ON DELETE CASCADE,
    UNIQUE (user_id, role_id)
);

-- 6. Bảng tạm cho link kích hoạt (dùng cho reset password,...)
CREATE TABLE employee_activation_links (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,
  token TEXT NOT NULL UNIQUE,
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Thêm dữ liệu mẫu cho roles (quan trọng) - đã bổ sung hr_employee
INSERT INTO roles (name) VALUES ('admin'), ('manager'), ('employee'), ('bod'), ('hr_employee');

-- Trigger cập nhật updated_at (cho employees)
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_employees_timestamp
BEFORE UPDATE ON employees
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

-- Các Index (cho các bảng chính, cải thiện hiệu suất truy vấn)
CREATE INDEX idx_employees_department_id ON employees(department_id);
CREATE INDEX idx_employees_job_title_id ON employees(job_title_id);
CREATE INDEX idx_employees_employee_code ON employees(employee_code);
CREATE INDEX idx_activation_links_token ON employee_activation_links(token);
CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_role_id ON user_roles(role_id);
CREATE INDEX idx_employees_login_email ON employees(login_email);
CREATE INDEX idx_employees_work_email ON employees(work_email);
CREATE INDEX idx_departments_name ON departments(name);
```

**Row Level Security (RLS) - (cho bảng `employees`)**

```sql
-- Bật RLS cho bảng employees
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;

-- 1. Admin: Toàn quyền (CRUD) trên tất cả bản ghi
CREATE POLICY "Admin can do everything on employees" ON employees
FOR ALL TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
)
WITH CHECK (
  EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
);

-- 2. Manager: Xem nhân viên trong phòng ban mà họ quản lý, hoặc tất cả nếu là BOD.
CREATE POLICY "Managers can view their department employees or all if BOD" ON employees
FOR SELECT TO authenticated
USING (
    department_id IN (SELECT id FROM departments WHERE manager_id = auth.uid())
    OR EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name IN ('admin', 'bod')
    )
);

-- 2.1 Manager UPDATE, chỉ được update thông tin thông thường, không được update phòng ban/chức danh
CREATE POLICY "Managers can update limited employee info" ON employees
FOR UPDATE TO authenticated
USING (
    department_id IN (SELECT id FROM departments WHERE manager_id = auth.uid())
)
WITH CHECK(
	department_id = OLD.department_id AND job_title_id = OLD.job_title_id
);

-- 3. HR Employee: Xem thông tin tất cả nhân viên và có thể cập nhật thông tin nhân sự
CREATE POLICY "HR can view all employees" ON employees
FOR SELECT TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
);

-- 3.1 HR Employee: Quyền chỉnh sửa thông tin nhân viên
CREATE POLICY "HR can update employee information" ON employees
FOR UPDATE TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
);

-- 3.2 HR Employee: Quyền thêm nhân viên mới
CREATE POLICY "HR can insert new employees" ON employees
FOR INSERT TO authenticated
WITH CHECK (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
);

-- 4. Employee: Chỉ xem thông tin của chính mình.
CREATE POLICY "Employees can view their own info" ON employees
FOR SELECT TO authenticated
USING (
    id = auth.uid()
);

-- 4.1 Employee: Update, chỉ được update 1 số thông tin cá nhân.
CREATE POLICY "Employees can update own limited info" ON employees
FOR UPDATE TO authenticated
USING (
    id = auth.uid()
)
WITH CHECK (
  -- Giả sử chỉ cho phép cập nhật avatar, trình độ học vấn.  Thêm các trường khác nếu cần.
  avatar_url = NEW.avatar_url AND education_level=NEW.education_level
  AND id = OLD.id
  AND employee_code = OLD.employee_code
  AND full_name = OLD.full_name
  AND gender = OLD.gender
  AND date_of_birth = OLD.date_of_birth
  AND department_id = OLD.department_id
  AND job_title_id = OLD.job_title_id
  AND hire_date = OLD.hire_date
  AND termination_date = OLD.termination_date
  AND status=OLD.status
);

-- 5. BOD (Board of Directors): Xem toàn bộ thông tin nhân viên (nhưng không được chỉnh sửa)
CREATE POLICY "BOD can view all employees" ON employees
FOR SELECT TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name = 'bod'
    )
);

-- Bật RLS và tạo policy tương tự cho các bảng khác (departments, job_titles, ...).
-- Ví dụ đơn giản cho departments:
ALTER TABLE departments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admin can do everything on departments" ON departments
FOR ALL TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
)
WITH CHECK (
  EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
);

-- HR Employee chỉ có quyền xem departments để có thể chọn khi tạo/cập nhật nhân viên
CREATE POLICY "HR Employee can view departments" ON departments
FOR SELECT TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
);

CREATE POLICY "Managers and BOD can view departments" ON departments
FOR SELECT TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid() AND r.name IN ('admin', 'manager', 'bod')
    )
);

-- Thiết lập RLS cho job_titles
ALTER TABLE job_titles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admin can do everything on job_titles" ON job_titles
FOR ALL TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'admin'
    )
);

-- HR Employee chỉ có quyền xem job_titles để có thể chọn khi tạo/cập nhật nhân viên
CREATE POLICY "HR Employee can view job_titles" ON job_titles
FOR SELECT TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur JOIN roles r ON ur.role_id = r.id WHERE ur.user_id = auth.uid() AND r.name = 'hr_employee'
    )
);

CREATE POLICY "All users can view job_titles" ON job_titles
FOR SELECT TO authenticated
USING (true);
```

